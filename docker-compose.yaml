# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.6.0
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: "3.8"
x-airflow-common: &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.6.0}
  build: .
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
    IOP_FTP_HOST: "sftp"
    SPRINGER_FTP_HOST: "sftp"
    OUP_FTP_HOST: "sftp"
    S3_ENDPOINT: "http://s3:9000"
    SPRINGER_FTP_PORT: 22
    IOP_FTP_PORT: 22
    IOP_FTP_SSH_PRIVATE_KEY: |
      -----BEGIN OPENSSH PRIVATE KEY-----
      b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
      NhAAAAAwEAAQAAAQEAnrBypqFMTUU3a3AEPFcA0eEgo/3jFypiLiHGj9Sq09dfC68PGl6l
      klyMYlEVuymVjWOGvtyvCs4Z/lpFkcg93Qj6tamMUGOKsQB6poIAlYjLnGD1FLtvWRzqah
      eFORpgr9BPzegrpqgSqxQ/2hx0qdwvcY9mqDbA4Oayavz3zVgvr6kGSt1LvCbgsFi5IPCF
      aKqknRmQkmz0WC65gebAIz+YbWDbnwPI4yOTMNycP4Vmk4XLUj39b/aa2+3wITd2AzMu8T
      VY1yGEUzQwFiGcl3TRVIWYMe7JTPAKkwAhD983r4ctKkXOv8OBTacDEXFy5WCNMDFBRZNr
      NKhviXsGqQAAA+BXfTduV303bgAAAAdzc2gtcnNhAAABAQCesHKmoUxNRTdrcAQ8VwDR4S
      Cj/eMXKmIuIcaP1KrT118Lrw8aXqWSXIxiURW7KZWNY4a+3K8Kzhn+WkWRyD3dCPq1qYxQ
      Y4qxAHqmggCViMucYPUUu29ZHOpqF4U5GmCv0E/N6CumqBKrFD/aHHSp3C9xj2aoNsDg5r
      Jq/PfNWC+vqQZK3Uu8JuCwWLkg8IVoqqSdGZCSbPRYLrmB5sAjP5htYNufA8jjI5Mw3Jw/
      hWaThctSPf1v9prb7fAhN3YDMy7xNVjXIYRTNDAWIZyXdNFUhZgx7slM8AqTACEP3zevhy
      0qRc6/w4FNpwMRcXLlYI0wMUFFk2s0qG+JewapAAAAAwEAAQAAAQBUiifqQZAGslM992Uq
      SCd1qHvdIcqzcq7vaKsBwQho5xoJfW+MWtPWT1uynQP4u8SimF0WnTbbiMUsTic17PmYIc
      p+sR7BTOZ8OYcd4bAx+biPTNAEBX7ieJchgfpFW5oaz91UEtX+aRfY8Ga76eD1BQp5cy37
      e3/x0LVIbhAN4pBZzsFkHLPBS+pPhzYqqtIQz2IvfKUQ4MV39rENFRBJNIUClsmyO50kQm
      0Z7eWE7NtdmSCL6kS5YwT2xKmJebWPjeXV041ujX2ysErlYL5dprBUM7rlkTPJhqpYUtK5
      ZsjuH4t4AuhOQMo9lAzfh+FZ20+ciCwDwSda3s/gMRsBAAAAgQCLj4KHc5ebQWSWQJ9/9P
      pL8nYBkScrH1p12rx4dDFQxVkAqgOfaWfs6BvMQVmlqeiZrsi5OmMTtkJOnIaJrrYVGoim
      gzSaQT1wEPnE4Le/UD2iuRgwRXzhcdmL+0XnqSEoIcsSJySzftcuOlSbyDy8I2wwA+pOhM
      so7cPZyOgkCgAAAIEAz9akadyx98UXGnfRCf3ltjNMoB0w4P8N51mVdCiG2I5NXEgLKAUT
      5xkr8239tyoUiWxMeQu07u1yFBvifpFRyxgY7ZiUWI828EbrzuFlztB36LPD/CmQDgJ1N4
      y0j2b6XrIgq3i879sLyV7AqWNf8tSMBKB4sptXSmkxgQ5WSpkAAACBAMN2L2TB1IO2ii7B
      E13hljwvEMWVBRZOAkephzYZfqkyVeTeX82q4TUR9YCcaauIqG0J+qTQoEBbe32K2CFB+Z
      bZEa5SJtIwdfprlouLjPtLF/cNKBelUxe3cvrNatOETzFhpOhR1Kev9gZXlpnTdSPIh2MJ
      LL2uJEo8nY17YraRAAAAI2xvcmVuem9AbG9yZW56b20zbWFjLmR5bmRucy5jZXJuLmNoAQ
      IDBAUGBw==
      -----END OPENSSH PRIVATE KEY-----

    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./airflow.cfg:/opt/airflow/airflow.cfg
    - ./tests:/opt/airflow/tests
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: docker.io/library/redis:latest
    expose:
      - 6379
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  sftp:
    image: atmoz/sftp
    ports:
      - "2222:22"
    volumes:
      - ./ssh/user_keys/fake_key.pub:/home/airflow/.ssh/keys/fake_key.pub:ro
      - ./data:/home/airflow/upload
    command: airflow:airflow:::upload
    restart: always

  ftp:
    container_name: ftp-server
    image: garethflowers/ftp-server
    environment:
      - FTP_USER=airflow
      - FTP_PASS=airflow
    restart: always
    ports:
      - "20-21:20-21/tcp"
      - "40000-40009:40000-40009/tcp" # passive mode
    volumes:
      - ./data:/home/airflow/upload

  s3:
    image: minio/minio
    expose:
      - 9000
      - 9001
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=airflow
      - MINIO_ROOT_PASSWORD=Airflow01
    command: server /data --console-address ":9001"

  create_buckets:
    image: minio/mc
    depends_on:
      - s3
    entrypoint: >
      /bin/sh -c " sleep 10; /usr/bin/mc alias set airflow http://s3:9000 airflow Airflow01; /usr/bin/mc mb airflow/scoap3; /usr/bin/mc mb airflow/springer; /usr/bin/mc mb airflow/aps; /usr/bin/mc mb airflow/hindawi; /usr/bin/mc mb airflow/iop; /usr/bin/mc mb airflow/elsevier; /usr/bin/mc mb airflow/oup; /usr/bin/mc mb airflow/jagiellonian; /usr/bin/mc anonymous set download airflow/scoap3; /usr/bin/mc anonymous set download airflow/springer; /usr/bin/mc anonymous set download airflow/aps; /usr/bin/mc anonymous set download airflow/hindawi; /usr/bin/mc anonymous set download airflow/iop; /usr/bin/mc anonymous set download airflow/elsevier; /usr/bin/mc anonymous set download airflow/oup; /usr/bin/mc anonymous set download airflow/jagiellonian; exit 0; "

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        if [ -f /opt/airflow/connections.json ]; then
          exec /entrypoint connections import /opt/airflow/connections.json
        fi
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
      - ./connections.json:/opt/airflow/connections.json

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
